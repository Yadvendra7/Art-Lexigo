{"ast":null,"code":"var _jsxFileName = \"/Users/yadvendrayadav/Desktop/nft-marketplace/src/frontend/components/Create.js\";\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\nconst Create = _ref => {\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) {\n      console.log(\"Missing required data (image, price, name, description)\");\n      return;\n    }\n    console.log(\"Uploading to IPFS...\");\n    const result = await client.add(JSON.stringify({\n      image,\n      name,\n      description,\n      p\n    }));\n    console.log(\"IPFS upload successful:\", result);\n    console.log(\"Minting and listing...\");\n    mintThenList(result);\n  };\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`;\n    // mint nft \n    await (await nft.mint(uri)).wait();\n    // get tokenId of new nft \n    const id = await nft.tokenCount();\n    // approve marketplace to spend nft\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait();\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-lg-12 mx-auto\",\n    style: {\n      maxWidth: '1000px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"g-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"file\",\n    name: \"file\",\n    onChange: uploadToIPFS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control, {\n    onChange: e => setName(e.target.value),\n    size: \"lg\",\n    required: true,\n    type: \"text\",\n    placeholder: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control, {\n    onChange: e => setDescription(e.target.value),\n    size: \"lg\",\n    required: true,\n    as: \"textarea\",\n    placeholder: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control, {\n    onChange: e => setPrice(e.target.value),\n    size: \"lg\",\n    required: true,\n    type: \"number\",\n    placeholder: \"Price in ETH\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-grid px-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: createNFT,\n    variant: \"primary\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"Create & List NFT!\")))))));\n};\nexport default Create;","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","Create","_ref","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","console","log","path","error","createNFT","JSON","stringify","p","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","React","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","role","style","maxWidth","Control","type","onChange","e","value","size","required","placeholder","as","onClick","variant"],"sources":["/Users/yadvendrayadav/Desktop/nft-marketplace/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('')\n  const [price, setPrice] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file)\n        console.log(result)\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n\n const createNFT = async () => {\n  if (!image || !price || !name || !description) {\n    console.log(\"Missing required data (image, price, name, description)\");\n    return;\n  }\n    console.log(\"Uploading to IPFS...\");\n    const result = await client.add(JSON.stringify({ image, name, description, p }));\n    console.log(\"IPFS upload successful:\", result);\n\n    console.log(\"Minting and listing...\");\n    mintThenList(result);\n\n  \n};\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control\n                type=\"file\"\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n\n              <Form.Control \n              onChange={(e) => setName(e.target.value)} \n              size=\"lg\" \n              required type=\"text\" \n              placeholder=\"Name\" />\n\n              <Form.Control \n              onChange={(e) => setDescription(e.target.value)} \n              size=\"lg\" \n              required as=\"textarea\" \n              placeholder=\"Description\" />\n\n              <Form.Control \n              onChange={(e) => setPrice(e.target.value)} \n              size=\"lg\" \n              required type=\"number\" \n              placeholder=\"Price in ETH\" />\n\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT}  variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create"],"mappings":"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"},"metadata":{},"sourceType":"module"}