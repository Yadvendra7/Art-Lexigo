{"ast":null,"code":"'use strict';\n\nconst isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';\nfunction getDefaultBase() {\n  if (isReactNative) {\n    return 'http://localhost';\n  }\n  // in some environments i.e. cloudflare workers location is not available\n  if (!self.location) {\n    return '';\n  }\n  return self.location.protocol + '//' + self.location.host;\n}\nconst URL = self.URL;\nconst defaultBase = getDefaultBase();\nclass URLWithLegacySupport {\n  constructor() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultBase;\n    this.super = new URL(url, base);\n    this.path = this.pathname + this.search;\n    this.auth = this.username && this.password ? this.username + ':' + this.password : null;\n    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;\n  }\n  get hash() {\n    return this.super.hash;\n  }\n  get host() {\n    return this.super.host;\n  }\n  get hostname() {\n    return this.super.hostname;\n  }\n  get href() {\n    return this.super.href;\n  }\n  get origin() {\n    return this.super.origin;\n  }\n  get password() {\n    return this.super.password;\n  }\n  get pathname() {\n    return this.super.pathname;\n  }\n  get port() {\n    return this.super.port;\n  }\n  get protocol() {\n    return this.super.protocol;\n  }\n  get search() {\n    return this.super.search;\n  }\n  get searchParams() {\n    return this.super.searchParams;\n  }\n  get username() {\n    return this.super.username;\n  }\n  set hash(hash) {\n    this.super.hash = hash;\n  }\n  set host(host) {\n    this.super.host = host;\n  }\n  set hostname(hostname) {\n    this.super.hostname = hostname;\n  }\n  set href(href) {\n    this.super.href = href;\n  }\n  set password(password) {\n    this.super.password = password;\n  }\n  set pathname(pathname) {\n    this.super.pathname = pathname;\n  }\n  set port(port) {\n    this.super.port = port;\n  }\n  set protocol(protocol) {\n    this.super.protocol = protocol;\n  }\n  set search(search) {\n    this.super.search = search;\n  }\n  set username(username) {\n    this.super.username = username;\n  }\n\n  /**\n   * @param {any} o\n   */\n  static createObjectURL(o) {\n    return URL.createObjectURL(o);\n  }\n\n  /**\n   * @param {string} o\n   */\n  static revokeObjectURL(o) {\n    URL.revokeObjectURL(o);\n  }\n  toJSON() {\n    return this.super.toJSON();\n  }\n  toString() {\n    return this.super.toString();\n  }\n  format() {\n    return this.toString();\n  }\n}\n\n/**\n * @param {string | import('url').UrlObject} obj\n */\nfunction format(obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj);\n    return url.toString();\n  }\n  if (!(obj instanceof URL)) {\n    const userPass =\n    // @ts-ignore its not supported in node but we normalise\n    obj.username && obj.password\n    // @ts-ignore its not supported in node but we normalise\n    ? `${obj.username}:${obj.password}@` : '';\n    const auth = obj.auth ? obj.auth + '@' : '';\n    const port = obj.port ? ':' + obj.port : '';\n    const protocol = obj.protocol ? obj.protocol + '//' : '';\n    const host = obj.host || '';\n    const hostname = obj.hostname || '';\n    const search = obj.search || (obj.query ? '?' + obj.query : '');\n    const hash = obj.hash || '';\n    const pathname = obj.pathname || '';\n    // @ts-ignore - path is not supported in node but we normalise\n    const path = obj.path || pathname + search;\n    return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;\n  }\n}\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n};","map":null,"metadata":{},"sourceType":"script"}