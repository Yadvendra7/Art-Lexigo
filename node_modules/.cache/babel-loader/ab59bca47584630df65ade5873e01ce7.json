{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = exports.encode = exports.toGeneral = exports.code = exports.name = void 0;\nconst signing_1 = __importDefault(require(\"./signing\"));\nconst encryption_1 = __importDefault(require(\"./encryption\"));\nconst cbor = __importStar(require(\"@ipld/dag-cbor\"));\nexports.name = 'dag-jose';\nexports.code = 133;\nfunction isDagJWS(jose) {\n  return 'payload' in jose && typeof jose.payload === 'string' && 'signatures' in jose && Array.isArray(jose.signatures);\n}\nfunction isEncodedJWS(jose) {\n  return 'payload' in jose && jose.payload instanceof Uint8Array && 'signatures' in jose && Array.isArray(jose.signatures);\n}\nfunction isEncodedJWE(jose) {\n  return 'ciphertext' in jose && jose.ciphertext instanceof Uint8Array && 'iv' in jose && jose.iv instanceof Uint8Array && 'protected' in jose && jose.protected instanceof Uint8Array && 'tag' in jose && jose.tag instanceof Uint8Array;\n}\nfunction isDagJWE(jose) {\n  return 'ciphertext' in jose && typeof jose.ciphertext === 'string' && 'iv' in jose && typeof jose.iv === 'string' && 'protected' in jose && typeof jose.protected === 'string' && 'tag' in jose && typeof jose.tag === 'string';\n}\nfunction toGeneral(jose) {\n  if (typeof jose === 'string') {\n    const split = jose.split('.');\n    if (split.length === 3) {\n      return signing_1.default.fromSplit(split);\n    } else if (split.length === 5) {\n      return encryption_1.default.fromSplit(split);\n    }\n    throw new Error('Not a valid JOSE string');\n  }\n  if (isDagJWS(jose) || isDagJWE(jose)) {\n    return jose;\n  }\n  throw new Error('Not a valid unencoded JOSE object');\n}\nexports.toGeneral = toGeneral;\nfunction encode(obj) {\n  if (typeof obj === 'string') {\n    obj = toGeneral(obj);\n  }\n  let encodedJose;\n  if (isDagJWS(obj)) {\n    encodedJose = signing_1.default.encode(obj);\n  } else if (isDagJWE(obj)) {\n    encodedJose = encryption_1.default.encode(obj);\n  } else {\n    throw new Error('Not a valid JOSE object');\n  }\n  return new Uint8Array(cbor.encode(encodedJose));\n}\nexports.encode = encode;\nfunction decode(data) {\n  let encoded;\n  try {\n    encoded = cbor.decode(data);\n  } catch (e) {\n    throw new Error('Not a valid DAG-JOSE object');\n  }\n  if (isEncodedJWS(encoded)) {\n    return signing_1.default.decode(encoded);\n  } else if (isEncodedJWE(encoded)) {\n    return encryption_1.default.decode(encoded);\n  } else {\n    throw new Error('Not a valid DAG-JOSE object');\n  }\n}\nexports.decode = decode;","map":null,"metadata":{},"sourceType":"script"}