{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar fromString = require('uint8arrays/from-string');\nvar responseTypes = require('./response-types.js');\nvar multiaddr = require('multiaddr');\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n        };\n      }),\n      providers: (event.Responses || []).map(_ref2 => {\n        let {\n          ID,\n          Addrs\n        } = _ref2;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n        };\n      })\n    };\n  }\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(_ref3 => {\n        let {\n          ID,\n          Addrs\n        } = _ref3;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n        };\n      })\n    };\n  }\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(_ref4 => {\n      let {\n        ID\n      } = _ref4;\n      return ID;\n    });\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};\nexports.mapEvent = mapEvent;","map":null,"metadata":{},"sourceType":"script"}